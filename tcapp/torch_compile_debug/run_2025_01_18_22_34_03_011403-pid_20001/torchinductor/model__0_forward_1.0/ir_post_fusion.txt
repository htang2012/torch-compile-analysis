op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', 288*c0 + c1 + 32*c2, {c0: 64, c1: 32, c2: 9}, None)]
op0.unmet_dependencies = []
op0.met_dependencies = [MemoryDep('primals_4', c0, {c0: 18432}, None)]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cpu', torch.float32, size=[64, 32, 3, 3], stride=[288, 1, 96, 32])
    buf0.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op3'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op0.group.device = cpu
op0.group.iteration = ((64, 32, 9), ())
op0.sizes = ([64, 32, 9], [])
primals_4_layout = FixedLayout('cpu', torch.float32, size=[64, 32, 3, 3], stride=[288, 9, 3, 1])
buf0_layout = FixedLayout('cpu', torch.float32, size=[64, 32, 3, 3], stride=[288, 1, 96, 32])
class op0_loop_body:
    var_ranges = {z0: 64, z1: 32, z2: 9}
    index0 = 288*z0 + 9*z1 + z2
    index1 = 288*z0 + z1 + 32*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_4', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf0', get_index_1, load, None)
        return store


op1: ExternKernelSchedulerNode(ExternKernelAlloc)
op1.writes = [StarDep(name='buf1', mode=None)]
op1.unmet_dependencies = []
op1.met_dependencies = 
    [   StarDep(name='primals_1', mode=None),
        StarDep(name='primals_2', mode=None),
        StarDep(name='primals_3', mode=None)]
op1.outputs = [
    buf1: ExternKernelAlloc
    buf1.layout = FixedLayout('cpu', torch.float32, size=[64, 32, 26, 26], stride=[21632, 676, 26, 1])
    buf1.users = [NodeUser(node=SchedulerNode(name='op2'), can_inplace=False, is_weak=False)]
]
op1.node.kernel = extern_kernels.convolution


op2: SchedulerNode(ComputedBuffer)
op2.writes = [MemoryDep('buf2', 21632*c0 + c1 + 32*c2, {c0: 64, c1: 32, c2: 676}, None)]
op2.unmet_dependencies = [MemoryDep('buf1', c0, {c0: 1384448}, None)]
op2.met_dependencies = []
op2.outputs = [
    buf2: ComputedBuffer
    buf2.layout = FixedLayout('cpu', torch.float32, size=[64, 32, 26, 26], stride=[21632, 1, 832, 32])
    buf2.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op3'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op2.group.device = cpu
op2.group.iteration = ((64, 32, 676), ())
op2.sizes = ([64, 32, 676], [])
buf1_layout = FixedLayout('cpu', torch.float32, size=[64, 32, 26, 26], stride=[21632, 676, 26, 1])
buf2_layout = FixedLayout('cpu', torch.float32, size=[64, 32, 26, 26], stride=[21632, 1, 832, 32])
class op2_loop_body:
    var_ranges = {z0: 64, z1: 32, z2: 676}
    index0 = 21632*z0 + 676*z1 + z2
    index1 = 21632*z0 + z1 + 32*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf2', get_index_1, relu, None)
        return store


op3: ExternKernelSchedulerNode(ExternKernelAlloc)
op3.writes = [StarDep(name='buf3', mode=None)]
op3.unmet_dependencies = [StarDep(name='buf0', mode=None), StarDep(name='buf2', mode=None)]
op3.met_dependencies = [StarDep(name='primals_5', mode=None)]
op3.outputs = [
    buf3: ExternKernelAlloc
    buf3.layout = FixedLayout('cpu', torch.float32, size=[64, 64, 24, 24], stride=[36864, 1, 1536, 64])
    buf3.users = [NodeUser(node=SchedulerNode(name='op4'), can_inplace=True, is_weak=False)]
]
op3.node.kernel = extern_kernels.convolution


op4: SchedulerNode(ComputedBuffer)
op4.writes = [MemoryDep('buf4', c0, {c0: 2359296}, None)]
op4.unmet_dependencies = [MemoryDep('buf3', c0, {c0: 2359296}, None)]
op4.met_dependencies = []
op4.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cpu', torch.float32, size=[64, 64, 24, 24], stride=[36864, 1, 1536, 64])
    buf4.users = [
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op4.group.device = cpu
op4.group.iteration = ((2359296,), ())
op4.sizes = ([2359296], [])
buf3_layout = FixedLayout('cpu', torch.float32, size=[64, 64, 24, 24], stride=[36864, 1, 1536, 64])
buf4_layout = FixedLayout('cpu', torch.float32, size=[64, 64, 24, 24], stride=[36864, 1, 1536, 64])
class op4_loop_body:
    var_ranges = {z0: 2359296}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf4', get_index_1, relu, None)
        return store


op5: SchedulerNode(ComputedBuffer)
op5.writes = [MemoryDep('buf5', c0, {c0: 589824}, None)]
op5.unmet_dependencies = 
    [   MemoryDep('buf4', 3072*c0 + 128*c1 + c2 + 1536, {c0: 768, c1: 12, c2: 64}, None),
        MemoryDep('buf4', 3072*c0 + 128*c1 + c2 + 1600, {c0: 768, c1: 12, c2: 64}, None),
        MemoryDep('buf4', 3072*c0 + 128*c1 + c2 + 64, {c0: 768, c1: 12, c2: 64}, None),
        MemoryDep('buf4', 3072*c0 + 128*c1 + c2, {c0: 768, c1: 12, c2: 64}, None)]
op5.met_dependencies = []
op5.outputs = [
    buf5: ComputedBuffer
    buf5.layout = FixedLayout('cpu', torch.int8, size=[64, 64, 12, 12], stride=[9216, 1, 768, 64])
    buf5.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op5.group.device = cpu
op5.group.iteration = ((768, 12, 64), ())
op5.sizes = ([768, 12, 64], [])
buf4_layout = FixedLayout('cpu', torch.float32, size=[64, 64, 24, 24], stride=[36864, 1, 1536, 64])
buf4_layout = FixedLayout('cpu', torch.float32, size=[64, 64, 24, 24], stride=[36864, 1, 1536, 64])
buf4_layout = FixedLayout('cpu', torch.float32, size=[64, 64, 24, 24], stride=[36864, 1, 1536, 64])
buf4_layout = FixedLayout('cpu', torch.float32, size=[64, 64, 24, 24], stride=[36864, 1, 1536, 64])
buf5_layout = FixedLayout('cpu', torch.int8, size=[64, 64, 12, 12], stride=[9216, 1, 768, 64])
class op5_loop_body:
    var_ranges = {z0: 768, z1: 12, z2: 64}
    index0 = 3072*z0 + 128*z1 + z2
    index1 = 3072*z0 + 128*z1 + z2 + 64
    index2 = 3072*z0 + 128*z1 + z2 + 1536
    index3 = 3072*z0 + 128*z1 + z2 + 1600
    index4 = 768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf4', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf4', get_index_1)
        gt = ops.gt(load_1, load)
        constant = ops.constant(1, torch.int8)
        constant_1 = ops.constant(0, torch.int8)
        where = ops.where(gt, constant, constant_1)
        maximum = ops.maximum(load_1, load)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf4', get_index_2)
        gt_1 = ops.gt(load_2, maximum)
        constant_2 = ops.constant(2, torch.int8)
        where_1 = ops.where(gt_1, constant_2, where)
        maximum_1 = ops.maximum(load_2, maximum)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf4', get_index_3)
        gt_2 = ops.gt(load_3, maximum_1)
        constant_3 = ops.constant(3, torch.int8)
        where_2 = ops.where(gt_2, constant_3, where_1)
        maximum_2 = ops.maximum(load_3, maximum_1)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf5', get_index_4, where_2, None)
        return store


op6: ExternKernelSchedulerNode(RandomSeeds)
op6.writes = [StarDep(name='buf6', mode=None)]
op6.unmet_dependencies = []
op6.met_dependencies = []
op6.outputs = [
    buf6: RandomSeeds
    buf6.layout = FixedLayout('cpu', torch.int64, size=[2], stride=[1])
    buf6.users = [
        NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False),
    ]
]
op6.node.kernel = aten.randint.low_out


op7_op8: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op7_op8.writes = 
    [   MemoryDep('buf7', c0, {c0: 589824}, None),
        MemoryDep('buf8', c0, {c0: 589824}, None)]
op7_op8.unmet_dependencies = [MemoryDep('buf6', 0, {}, None)]
op7_op8.met_dependencies = []
op7_op8.outputs = [
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cpu', torch.float32, size=[64, 64, 12, 12], stride=[9216, 144, 12, 1])
    buf7.users = [NodeUser(node=SchedulerNode(name='op8'), can_inplace=True, is_weak=False)]
    buf8: ComputedBuffer
    buf8.layout = FixedLayout('cpu', torch.bool, size=[64, 64, 12, 12], stride=[9216, 144, 12, 1])
    buf8.users = [
        NodeUser(node=SchedulerNode(name='op9'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op7_op8.snodes[0] =
op7: SchedulerNode(ComputedBuffer)
op7.writes = [MemoryDep('buf7', c0, {c0: 589824}, None)]
op7.unmet_dependencies = [MemoryDep('buf6', 0, {}, None)]
op7.met_dependencies = []
op7.outputs = [
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cpu', torch.float32, size=[64, 64, 12, 12], stride=[9216, 144, 12, 1])
    buf7.users = [NodeUser(node=SchedulerNode(name='op8'), can_inplace=True, is_weak=False)]
]
op7.group.device = cpu
op7.group.iteration = ((589824,), ())
op7.sizes = ([589824], [])
buf6_layout = FixedLayout('cpu', torch.int64, size=[2], stride=[1])
buf7_layout = FixedLayout('cpu', torch.float32, size=[64, 64, 12, 12], stride=[9216, 144, 12, 1])
class op7_loop_body:
    var_ranges = {z0: 589824}
    index0 = 0
    index1 = z0
    def body(self, ops):
        load_seed = ops.load_seed('buf6', 0)
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        rand = ops.rand(load_seed, index_expr)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf7', get_index_1, rand, None)
        return store
op7_op8.snodes[1] =
op8: SchedulerNode(ComputedBuffer)
op8.writes = [MemoryDep('buf8', c0, {c0: 589824}, None)]
op8.unmet_dependencies = [MemoryDep('buf7', c0, {c0: 589824}, None)]
op8.met_dependencies = []
op8.outputs = [
    buf8: ComputedBuffer
    buf8.layout = FixedLayout('cpu', torch.bool, size=[64, 64, 12, 12], stride=[9216, 144, 12, 1])
    buf8.users = [
        NodeUser(node=SchedulerNode(name='op9'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op8.group.device = cpu
op8.group.iteration = ((589824,), ())
op8.sizes = ([589824], [])
buf7_layout = FixedLayout('cpu', torch.float32, size=[64, 64, 12, 12], stride=[9216, 144, 12, 1])
buf8_layout = FixedLayout('cpu', torch.bool, size=[64, 64, 12, 12], stride=[9216, 144, 12, 1])
class op8_loop_body:
    var_ranges = {z0: 589824}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf7', get_index)
        constant = ops.constant(0.25, torch.float32)
        gt = ops.gt(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf8', get_index_1, gt, None)
        return store


op9: SchedulerNode(ComputedBuffer)
op9.writes = [MemoryDep('buf9', 9216*c0 + c1 + 144*c2, {c0: 64, c1: 144, c2: 64}, None)]
op9.unmet_dependencies = 
    [   MemoryDep('buf4', 3072*c0 + 128*c1 + c2 + 1536, {c0: 768, c1: 12, c2: 64}, None),
        MemoryDep('buf4', 3072*c0 + 128*c1 + c2 + 1600, {c0: 768, c1: 12, c2: 64}, None),
        MemoryDep('buf4', 3072*c0 + 128*c1 + c2 + 64, {c0: 768, c1: 12, c2: 64}, None),
        MemoryDep('buf4', 3072*c0 + 128*c1 + c2, {c0: 768, c1: 12, c2: 64}, None),
        MemoryDep('buf8', 9216*c0 + c1 + 144*c2, {c0: 64, c1: 144, c2: 64}, None)]
op9.met_dependencies = []
op9.outputs = [
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cpu', torch.float32, size=[64, 64, 12, 12], stride=[9216, 144, 12, 1])
    buf9.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op10'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op9.group.device = cpu
op9.group.iteration = ((64, 12, 12, 64), ())
op9.sizes = ([64, 12, 12, 64], [])
buf8_layout = FixedLayout('cpu', torch.bool, size=[64, 64, 12, 12], stride=[9216, 144, 12, 1])
buf4_layout = FixedLayout('cpu', torch.float32, size=[64, 64, 24, 24], stride=[36864, 1, 1536, 64])
buf4_layout = FixedLayout('cpu', torch.float32, size=[64, 64, 24, 24], stride=[36864, 1, 1536, 64])
buf4_layout = FixedLayout('cpu', torch.float32, size=[64, 64, 24, 24], stride=[36864, 1, 1536, 64])
buf4_layout = FixedLayout('cpu', torch.float32, size=[64, 64, 24, 24], stride=[36864, 1, 1536, 64])
buf9_layout = FixedLayout('cpu', torch.float32, size=[64, 64, 12, 12], stride=[9216, 144, 12, 1])
class op9_loop_body:
    var_ranges = {z0: 64, z1: 12, z2: 12, z3: 64}
    index0 = 9216*z0 + 12*z1 + z2 + 144*z3
    index1 = 36864*z0 + 3072*z1 + 128*z2 + z3
    index2 = 36864*z0 + 3072*z1 + 128*z2 + z3 + 64
    index3 = 36864*z0 + 3072*z1 + 128*z2 + z3 + 1536
    index4 = 36864*z0 + 3072*z1 + 128*z2 + z3 + 1600
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf8', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bool)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf4', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf4', get_index_2)
        maximum = ops.maximum(load_2, load_1)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf4', get_index_3)
        maximum_1 = ops.maximum(load_3, maximum)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('buf4', get_index_4)
        maximum_2 = ops.maximum(load_4, maximum_1)
        mul = ops.mul(to_dtype, maximum_2)
        constant = ops.constant(1.3333333333333333, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf9', get_index_5, mul_1, None)
        return store


op10: ExternKernelSchedulerNode(ExternKernelOut)
op10.writes = [StarDep(name='buf10', mode=None)]
op10.unmet_dependencies = [StarDep(name='buf9', mode=None)]
op10.met_dependencies = [StarDep(name='primals_6', mode=None), StarDep(name='primals_7', mode=None)]
op10.outputs = [
    buf10: ExternKernelOut
    buf10.layout = FixedLayout('cpu', torch.float32, size=[64, 128], stride=[128, 1])
    buf10.users = [
        NodeUser(node=SchedulerNode(name='op13'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=True, is_weak=False),
    ]
]
op10.node.kernel = extern_kernels.addmm


op11_op12_op13_op18: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op11_op12_op13_op18.writes = 
    [   MemoryDep('buf11', c0, {c0: 8192}, None),
        MemoryDep('buf12', c0, {c0: 8192}, None),
        MemoryDep('buf13', c0, {c0: 8192}, None),
        MemoryDep('buf18', c0, {c0: 8192}, None)]
op11_op12_op13_op18.unmet_dependencies = [MemoryDep('buf10', c0, {c0: 8192}, None), MemoryDep('buf6', 1, {}, None)]
op11_op12_op13_op18.met_dependencies = []
op11_op12_op13_op18.outputs = [
    buf11: ComputedBuffer
    buf11.layout = FixedLayout('cpu', torch.float32, size=[64, 128], stride=[128, 1])
    buf11.users = [NodeUser(node=SchedulerNode(name='op12'), can_inplace=True, is_weak=False)]
    buf12: ComputedBuffer
    buf12.layout = FixedLayout('cpu', torch.bool, size=[64, 128], stride=[128, 1])
    buf12.users = [
        NodeUser(node=SchedulerNode(name='op13'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf13: ComputedBuffer
    buf13.layout = FixedLayout('cpu', torch.float32, size=[64, 128], stride=[128, 1])
    buf13.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op14'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cpu', torch.bool, size=[64, 128], stride=[128, 1])
    buf18.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op11_op12_op13_op18.snodes[0] =
op11: SchedulerNode(ComputedBuffer)
op11.writes = [MemoryDep('buf11', c0, {c0: 8192}, None)]
op11.unmet_dependencies = [MemoryDep('buf6', 1, {}, None)]
op11.met_dependencies = []
op11.outputs = [
    buf11: ComputedBuffer
    buf11.layout = FixedLayout('cpu', torch.float32, size=[64, 128], stride=[128, 1])
    buf11.users = [NodeUser(node=SchedulerNode(name='op12'), can_inplace=True, is_weak=False)]
]
op11.group.device = cpu
op11.group.iteration = ((8192,), ())
op11.sizes = ([8192], [])
buf6_layout = FixedLayout('cpu', torch.int64, size=[2], stride=[1])
buf11_layout = FixedLayout('cpu', torch.float32, size=[64, 128], stride=[128, 1])
class op11_loop_body:
    var_ranges = {z0: 8192}
    index0 = 1
    index1 = z0
    def body(self, ops):
        load_seed = ops.load_seed('buf6', 1)
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        rand = ops.rand(load_seed, index_expr)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf11', get_index_1, rand, None)
        return store
op11_op12_op13_op18.snodes[1] =
op12: SchedulerNode(ComputedBuffer)
op12.writes = [MemoryDep('buf12', c0, {c0: 8192}, None)]
op12.unmet_dependencies = [MemoryDep('buf11', c0, {c0: 8192}, None)]
op12.met_dependencies = []
op12.outputs = [
    buf12: ComputedBuffer
    buf12.layout = FixedLayout('cpu', torch.bool, size=[64, 128], stride=[128, 1])
    buf12.users = [
        NodeUser(node=SchedulerNode(name='op13'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op12.group.device = cpu
op12.group.iteration = ((8192,), ())
op12.sizes = ([8192], [])
buf11_layout = FixedLayout('cpu', torch.float32, size=[64, 128], stride=[128, 1])
buf12_layout = FixedLayout('cpu', torch.bool, size=[64, 128], stride=[128, 1])
class op12_loop_body:
    var_ranges = {z0: 8192}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf11', get_index)
        constant = ops.constant(0.5, torch.float32)
        gt = ops.gt(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf12', get_index_1, gt, None)
        return store
op11_op12_op13_op18.snodes[2] =
op13: SchedulerNode(ComputedBuffer)
op13.writes = [MemoryDep('buf13', c0, {c0: 8192}, None)]
op13.unmet_dependencies = 
    [   MemoryDep('buf10', c0, {c0: 8192}, None),
        MemoryDep('buf12', c0, {c0: 8192}, None)]
op13.met_dependencies = []
op13.outputs = [
    buf13: ComputedBuffer
    buf13.layout = FixedLayout('cpu', torch.float32, size=[64, 128], stride=[128, 1])
    buf13.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op14'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op13.group.device = cpu
op13.group.iteration = ((8192,), ())
op13.sizes = ([8192], [])
buf12_layout = FixedLayout('cpu', torch.bool, size=[64, 128], stride=[128, 1])
buf10_layout = FixedLayout('cpu', torch.float32, size=[64, 128], stride=[128, 1])
buf13_layout = FixedLayout('cpu', torch.float32, size=[64, 128], stride=[128, 1])
class op13_loop_body:
    var_ranges = {z0: 8192}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf12', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bool)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf10', get_index_1)
        relu = ops.relu(load_1)
        mul = ops.mul(to_dtype, relu)
        constant = ops.constant(2.0, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf13', get_index_2, mul_1, None)
        return store
op11_op12_op13_op18.snodes[3] =
op18: SchedulerNode(ComputedBuffer)
op18.writes = [MemoryDep('buf18', c0, {c0: 8192}, None)]
op18.unmet_dependencies = [MemoryDep('buf10', c0, {c0: 8192}, None)]
op18.met_dependencies = []
op18.outputs = [
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cpu', torch.bool, size=[64, 128], stride=[128, 1])
    buf18.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op18.group.device = cpu
op18.group.iteration = ((8192,), ())
op18.sizes = ([8192], [])
buf10_layout = FixedLayout('cpu', torch.float32, size=[64, 128], stride=[128, 1])
buf18_layout = FixedLayout('cpu', torch.bool, size=[64, 128], stride=[128, 1])
class op18_loop_body:
    var_ranges = {z0: 8192}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf10', get_index)
        relu = ops.relu(load)
        constant = ops.constant(0.0, torch.float32)
        le = ops.le(relu, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf18', get_index_1, le, None)
        return store


op14: ExternKernelSchedulerNode(ExternKernelOut)
op14.writes = [StarDep(name='buf14', mode=None)]
op14.unmet_dependencies = [StarDep(name='buf13', mode=None)]
op14.met_dependencies = [StarDep(name='primals_8', mode=None), StarDep(name='primals_9', mode=None)]
op14.outputs = [
    buf14: ExternKernelOut
    buf14.layout = FixedLayout('cpu', torch.float32, size=[64, 10], stride=[10, 1])
    buf14.users = [
        NodeUser(node=SchedulerNode(name='op15'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=True, is_weak=False),
    ]
]
op14.node.kernel = extern_kernels.addmm


op15_op16_op17: OuterLoopFusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op15_op16_op17.writes = 
    [   MemoryDep('buf15', c0, {c0: 64}, None),
        MemoryDep('buf16', c0, {c0: 64}, None),
        MemoryDep('buf17', c0, {c0: 640}, None)]
op15_op16_op17.unmet_dependencies = [MemoryDep('buf14', c0, {c0: 640}, None)]
op15_op16_op17.met_dependencies = []
op15_op16_op17.outputs = [
    buf15: ComputedBuffer
    buf15.layout = FixedLayout('cpu', torch.float32, size=[64, 1], stride=[1, 64])
    buf15.users = [
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False),
    ]
    buf16: ComputedBuffer
    buf16.layout = FixedLayout('cpu', torch.float32, size=[64, 1], stride=[1, 64])
    buf16.users = [NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False)]
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cpu', torch.float32, size=[64, 10], stride=[10, 1])
    buf17.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op15_op16_op17.snodes[0] =
op15: SchedulerNode(ComputedBuffer)
op15.writes = [MemoryDep('buf15', c0, {c0: 64}, None)]
op15.unmet_dependencies = [MemoryDep('buf14', c0, {c0: 640}, None)]
op15.met_dependencies = []
op15.outputs = [
    buf15: ComputedBuffer
    buf15.layout = FixedLayout('cpu', torch.float32, size=[64, 1], stride=[1, 64])
    buf15.users = [
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False),
    ]
]
op15.group.device = cpu
op15.group.iteration = ((64,), (10,))
op15.sizes = ([64], [10])
buf14_layout = FixedLayout('cpu', torch.float32, size=[64, 10], stride=[10, 1])
buf15_layout = FixedLayout('cpu', torch.float32, size=[64, 1], stride=[1, 64])
class op15_loop_body:
    var_ranges = {z0: 64, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf14', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf15', get_index_1, reduction)
        return store_reduction
op15_op16_op17.snodes[1] =
op16: SchedulerNode(ComputedBuffer)
op16.writes = [MemoryDep('buf16', c0, {c0: 64}, None)]
op16.unmet_dependencies = 
    [   MemoryDep('buf14', c0, {c0: 640}, None),
        MemoryDep('buf15', c0, {c0: 64}, None)]
op16.met_dependencies = []
op16.outputs = [
    buf16: ComputedBuffer
    buf16.layout = FixedLayout('cpu', torch.float32, size=[64, 1], stride=[1, 64])
    buf16.users = [NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False)]
]
op16.group.device = cpu
op16.group.iteration = ((64,), (10,))
op16.sizes = ([64], [10])
buf14_layout = FixedLayout('cpu', torch.float32, size=[64, 10], stride=[10, 1])
buf15_layout = FixedLayout('cpu', torch.float32, size=[64, 1], stride=[1, 64])
buf16_layout = FixedLayout('cpu', torch.float32, size=[64, 1], stride=[1, 64])
class op16_loop_body:
    var_ranges = {z0: 64, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf14', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf15', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf16', get_index_2, reduction)
        return store_reduction
op15_op16_op17.snodes[2] =
op17: SchedulerNode(ComputedBuffer)
op17.writes = [MemoryDep('buf17', c0, {c0: 640}, None)]
op17.unmet_dependencies = 
    [   MemoryDep('buf14', c0, {c0: 640}, None),
        MemoryDep('buf15', c0, {c0: 64}, None),
        MemoryDep('buf16', c0, {c0: 64}, None)]
op17.met_dependencies = []
op17.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cpu', torch.float32, size=[64, 10], stride=[10, 1])
    buf17.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op17.group.device = cpu
op17.group.iteration = ((64, 10), ())
op17.sizes = ([64, 10], [])
buf14_layout = FixedLayout('cpu', torch.float32, size=[64, 10], stride=[10, 1])
buf15_layout = FixedLayout('cpu', torch.float32, size=[64, 1], stride=[1, 64])
buf16_layout = FixedLayout('cpu', torch.float32, size=[64, 1], stride=[1, 64])
buf17_layout = FixedLayout('cpu', torch.float32, size=[64, 10], stride=[10, 1])
class op17_loop_body:
    var_ranges = {z0: 64, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf14', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf15', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf16', get_index_2)
        log = ops.log(load_2)
        sub_1 = ops.sub(sub, log)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf17', get_index_3, sub_1, None)
        return store


