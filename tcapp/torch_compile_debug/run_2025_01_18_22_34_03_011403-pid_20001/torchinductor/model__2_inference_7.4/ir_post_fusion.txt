op0: ExternKernelSchedulerNode(ExternKernelAlloc)
op0.writes = [StarDep(name='buf0', mode=None)]
op0.unmet_dependencies = []
op0.met_dependencies = 
    [   StarDep(name='arg0_1', mode=None),
        StarDep(name='arg1_1', mode=None),
        StarDep(name='arg3_1', mode=None)]
op0.outputs = [
    buf0: ExternKernelAlloc
    buf0.layout = FixedLayout('cpu', torch.float32, size=[s0, 32, 26, 26], stride=[21632, 676, 26, 1])
    buf0.users = [NodeUser(node=SchedulerNode(name='op1'), can_inplace=False, is_weak=False)]
]
op0.node.kernel = extern_kernels.convolution


op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', 21632*c0 + c1 + 32*c2, {c0: s0, c1: 32, c2: 676}, None)]
op1.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 21632*s0}, None)]
op1.met_dependencies = []
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cpu', torch.float32, size=[s0, 32, 26, 26], stride=[21632, 1, 832, 32])
    buf1.users = [NodeUser(node=ExternKernelSchedulerNode(name='op3'), can_inplace=False, is_weak=False)]
]
op1.group.device = cpu
op1.group.iteration = ((s0, 32, 676), ())
op1.sizes = ([s0, 32, 676], [])
buf0_layout = FixedLayout('cpu', torch.float32, size=[s0, 32, 26, 26], stride=[21632, 676, 26, 1])
buf1_layout = FixedLayout('cpu', torch.float32, size=[s0, 32, 26, 26], stride=[21632, 1, 832, 32])
class op1_loop_body:
    var_ranges = {z0: s0, z1: 32, z2: 676}
    index0 = 21632*z0 + 676*z1 + z2
    index1 = 21632*z0 + z1 + 32*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf1', get_index_1, relu, None)
        return store


op2: SchedulerNode(ComputedBuffer)
op2.writes = [MemoryDep('buf2', 288*c0 + c1 + 32*c2, {c0: 64, c1: 32, c2: 9}, None)]
op2.unmet_dependencies = []
op2.met_dependencies = [MemoryDep('arg4_1', c0, {c0: 18432}, None)]
op2.outputs = [
    buf2: ComputedBuffer
    buf2.layout = FixedLayout('cpu', torch.float32, size=[64, 32, 3, 3], stride=[288, 1, 96, 32])
    buf2.users = [NodeUser(node=ExternKernelSchedulerNode(name='op3'), can_inplace=False, is_weak=False)]
]
op2.group.device = cpu
op2.group.iteration = ((64, 32, 9), ())
op2.sizes = ([64, 32, 9], [])
arg4_1_layout = FixedLayout('cpu', torch.float32, size=[64, 32, 3, 3], stride=[288, 9, 3, 1])
buf2_layout = FixedLayout('cpu', torch.float32, size=[64, 32, 3, 3], stride=[288, 1, 96, 32])
class op2_loop_body:
    var_ranges = {z0: 64, z1: 32, z2: 9}
    index0 = 288*z0 + 9*z1 + z2
    index1 = 288*z0 + z1 + 32*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg4_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf2', get_index_1, load, None)
        return store


op3: ExternKernelSchedulerNode(ExternKernelAlloc)
op3.writes = [StarDep(name='buf3', mode=None)]
op3.unmet_dependencies = [StarDep(name='buf1', mode=None), StarDep(name='buf2', mode=None)]
op3.met_dependencies = [StarDep(name='arg5_1', mode=None)]
op3.outputs = [
    buf3: ExternKernelAlloc
    buf3.layout = FixedLayout('cpu', torch.float32, size=[s0, 64, 24, 24], stride=[36864, 1, 1536, 64])
    buf3.users = [NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False)]
]
op3.node.kernel = extern_kernels.convolution


op4: SchedulerNode(ComputedBuffer)
op4.writes = [MemoryDep('buf4', 9216*c0 + c1 + 144*c2, {c0: s0, c1: 144, c2: 64}, None)]
op4.unmet_dependencies = 
    [   MemoryDep('buf3', 3072*c0 + 128*c1 + c2 + 1536, {c0: 12*s0, c1: 12, c2: 64}, None),
        MemoryDep('buf3', 3072*c0 + 128*c1 + c2 + 1600, {c0: 12*s0, c1: 12, c2: 64}, None),
        MemoryDep('buf3', 3072*c0 + 128*c1 + c2 + 64, {c0: 12*s0, c1: 12, c2: 64}, None),
        MemoryDep('buf3', 3072*c0 + 128*c1 + c2, {c0: 12*s0, c1: 12, c2: 64}, None)]
op4.met_dependencies = []
op4.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cpu', torch.float32, size=[s0, 64, 12, 12], stride=[9216, 144, 12, 1])
    buf4.users = [NodeUser(node=ExternKernelSchedulerNode(name='op5'), can_inplace=False, is_weak=False)]
]
op4.group.device = cpu
op4.group.iteration = ((s0, 12, 12, 64), ())
op4.sizes = ([s0, 12, 12, 64], [])
buf3_layout = FixedLayout('cpu', torch.float32, size=[s0, 64, 24, 24], stride=[36864, 1, 1536, 64])
buf3_layout = FixedLayout('cpu', torch.float32, size=[s0, 64, 24, 24], stride=[36864, 1, 1536, 64])
buf3_layout = FixedLayout('cpu', torch.float32, size=[s0, 64, 24, 24], stride=[36864, 1, 1536, 64])
buf3_layout = FixedLayout('cpu', torch.float32, size=[s0, 64, 24, 24], stride=[36864, 1, 1536, 64])
buf4_layout = FixedLayout('cpu', torch.float32, size=[s0, 64, 12, 12], stride=[9216, 144, 12, 1])
class op4_loop_body:
    var_ranges = {z0: s0, z1: 12, z2: 12, z3: 64}
    index0 = 36864*z0 + 3072*z1 + 128*z2 + z3
    index1 = 36864*z0 + 3072*z1 + 128*z2 + z3 + 64
    index2 = 36864*z0 + 3072*z1 + 128*z2 + z3 + 1536
    index3 = 36864*z0 + 3072*z1 + 128*z2 + z3 + 1600
    index4 = 9216*z0 + 12*z1 + z2 + 144*z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf3', get_index_1)
        relu_1 = ops.relu(load_1)
        maximum = ops.maximum(relu_1, relu)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf3', get_index_2)
        relu_2 = ops.relu(load_2)
        maximum_1 = ops.maximum(relu_2, maximum)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf3', get_index_3)
        relu_3 = ops.relu(load_3)
        maximum_2 = ops.maximum(relu_3, maximum_1)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf4', get_index_4, maximum_2, None)
        return store


op5: ExternKernelSchedulerNode(ExternKernelOut)
op5.writes = [StarDep(name='buf5', mode=None)]
op5.unmet_dependencies = [StarDep(name='buf4', mode=None)]
op5.met_dependencies = [StarDep(name='arg6_1', mode=None), StarDep(name='arg7_1', mode=None)]
op5.outputs = [
    buf5: ExternKernelOut
    buf5.layout = FixedLayout('cpu', torch.float32, size=[s0, 128], stride=[128, 1])
    buf5.users = [NodeUser(node=SchedulerNode(name='op6'), can_inplace=True, is_weak=False)]
]
op5.node.kernel = extern_kernels.addmm


op6: SchedulerNode(ComputedBuffer)
op6.writes = [MemoryDep('buf6', c0, {c0: 128*s0}, None)]
op6.unmet_dependencies = [MemoryDep('buf5', c0, {c0: 128*s0}, None)]
op6.met_dependencies = []
op6.outputs = [
    buf6: ComputedBuffer
    buf6.layout = FixedLayout('cpu', torch.float32, size=[s0, 128], stride=[128, 1])
    buf6.users = [NodeUser(node=ExternKernelSchedulerNode(name='op7'), can_inplace=False, is_weak=False)]
]
op6.group.device = cpu
op6.group.iteration = ((128*s0,), ())
op6.sizes = ([128*s0], [])
buf5_layout = FixedLayout('cpu', torch.float32, size=[s0, 128], stride=[128, 1])
buf6_layout = FixedLayout('cpu', torch.float32, size=[s0, 128], stride=[128, 1])
class op6_loop_body:
    var_ranges = {z0: 128*s0}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf5', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf6', get_index_1, relu, None)
        return store


op7: ExternKernelSchedulerNode(ExternKernelOut)
op7.writes = [StarDep(name='buf7', mode=None)]
op7.unmet_dependencies = [StarDep(name='buf6', mode=None)]
op7.met_dependencies = [StarDep(name='arg8_1', mode=None), StarDep(name='arg9_1', mode=None)]
op7.outputs = [
    buf7: ExternKernelOut
    buf7.layout = FixedLayout('cpu', torch.float32, size=[s0, 10], stride=[10, 1])
    buf7.users = [
        NodeUser(node=SchedulerNode(name='op8'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op10'), can_inplace=True, is_weak=False),
    ]
]
op7.node.kernel = extern_kernels.addmm


op8_op9_op10: OuterLoopFusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op8_op9_op10.writes = 
    [   MemoryDep('buf10', c0, {c0: 10*s0}, None),
        MemoryDep('buf8', c0, {c0: s0}, None),
        MemoryDep('buf9', c0, {c0: s0}, None)]
op8_op9_op10.unmet_dependencies = [MemoryDep('buf7', c0, {c0: 10*s0}, None)]
op8_op9_op10.met_dependencies = []
op8_op9_op10.outputs = [
    buf8: ComputedBuffer
    buf8.layout = FixedLayout('cpu', torch.float32, size=[s0, 1], stride=[1, s0])
    buf8.users = [
        NodeUser(node=SchedulerNode(name='op9'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op10'), can_inplace=False, is_weak=False),
    ]
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cpu', torch.float32, size=[s0, 1], stride=[1, s0])
    buf9.users = [NodeUser(node=SchedulerNode(name='op10'), can_inplace=False, is_weak=False)]
    buf10: ComputedBuffer
    buf10.layout = FixedLayout('cpu', torch.float32, size=[s0, 10], stride=[10, 1])
    buf10.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op8_op9_op10.snodes[0] =
op8: SchedulerNode(ComputedBuffer)
op8.writes = [MemoryDep('buf8', c0, {c0: s0}, None)]
op8.unmet_dependencies = [MemoryDep('buf7', c0, {c0: 10*s0}, None)]
op8.met_dependencies = []
op8.outputs = [
    buf8: ComputedBuffer
    buf8.layout = FixedLayout('cpu', torch.float32, size=[s0, 1], stride=[1, s0])
    buf8.users = [
        NodeUser(node=SchedulerNode(name='op9'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op10'), can_inplace=False, is_weak=False),
    ]
]
op8.group.device = cpu
op8.group.iteration = ((s0,), (10,))
op8.sizes = ([s0], [10])
buf7_layout = FixedLayout('cpu', torch.float32, size=[s0, 10], stride=[10, 1])
buf8_layout = FixedLayout('cpu', torch.float32, size=[s0, 1], stride=[1, s0])
class op8_loop_body:
    var_ranges = {z0: s0, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf7', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf8', get_index_1, reduction)
        return store_reduction
op8_op9_op10.snodes[1] =
op9: SchedulerNode(ComputedBuffer)
op9.writes = [MemoryDep('buf9', c0, {c0: s0}, None)]
op9.unmet_dependencies = 
    [   MemoryDep('buf7', c0, {c0: 10*s0}, None),
        MemoryDep('buf8', c0, {c0: s0}, None)]
op9.met_dependencies = []
op9.outputs = [
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cpu', torch.float32, size=[s0, 1], stride=[1, s0])
    buf9.users = [NodeUser(node=SchedulerNode(name='op10'), can_inplace=False, is_weak=False)]
]
op9.group.device = cpu
op9.group.iteration = ((s0,), (10,))
op9.sizes = ([s0], [10])
buf7_layout = FixedLayout('cpu', torch.float32, size=[s0, 10], stride=[10, 1])
buf8_layout = FixedLayout('cpu', torch.float32, size=[s0, 1], stride=[1, s0])
buf9_layout = FixedLayout('cpu', torch.float32, size=[s0, 1], stride=[1, s0])
class op9_loop_body:
    var_ranges = {z0: s0, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf7', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf8', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf9', get_index_2, reduction)
        return store_reduction
op8_op9_op10.snodes[2] =
op10: SchedulerNode(ComputedBuffer)
op10.writes = [MemoryDep('buf10', c0, {c0: 10*s0}, None)]
op10.unmet_dependencies = 
    [   MemoryDep('buf7', c0, {c0: 10*s0}, None),
        MemoryDep('buf8', c0, {c0: s0}, None),
        MemoryDep('buf9', c0, {c0: s0}, None)]
op10.met_dependencies = []
op10.outputs = [
    buf10: ComputedBuffer
    buf10.layout = FixedLayout('cpu', torch.float32, size=[s0, 10], stride=[10, 1])
    buf10.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op10.group.device = cpu
op10.group.iteration = ((s0, 10), ())
op10.sizes = ([s0, 10], [])
buf7_layout = FixedLayout('cpu', torch.float32, size=[s0, 10], stride=[10, 1])
buf8_layout = FixedLayout('cpu', torch.float32, size=[s0, 1], stride=[1, s0])
buf9_layout = FixedLayout('cpu', torch.float32, size=[s0, 1], stride=[1, s0])
buf10_layout = FixedLayout('cpu', torch.float32, size=[s0, 10], stride=[10, 1])
class op10_loop_body:
    var_ranges = {z0: s0, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf7', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf8', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf9', get_index_2)
        log = ops.log(load_2)
        sub_1 = ops.sub(sub, log)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf10', get_index_3, sub_1, None)
        return store


